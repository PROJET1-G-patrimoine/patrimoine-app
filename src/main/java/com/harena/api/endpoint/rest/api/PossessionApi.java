/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.harena.api.endpoint.rest.api;

import com.harena.api.endpoint.rest.client.ApiClient;
import com.harena.api.endpoint.rest.client.ApiException;
import com.harena.api.endpoint.rest.client.ApiResponse;
import com.harena.api.endpoint.rest.client.Pair;

import com.harena.api.endpoint.rest.model.BadRequestException;
import com.harena.api.endpoint.rest.model.GetPatrimoinePossessions200Response;
import com.harena.api.endpoint.rest.model.InternalServerException;
import com.harena.api.endpoint.rest.model.PossessionAvecType;
import com.harena.api.endpoint.rest.model.ResourceNotFoundException;
import com.harena.api.endpoint.rest.model.TooManyRequestsException;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T12:58:40.550938700+01:00[GMT+01:00]", comments = "Generator version: 7.7.0")
public class PossessionApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public PossessionApi() {
    this(new ApiClient());
  }

  public PossessionApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * met à jour une possession d&#39;un patrimoine si le nom existe, sinon on le crée
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param getPatrimoinePossessions200Response liste de possessions à ajouter ou à modifier (optional)
   * @return GetPatrimoinePossessions200Response
   * @throws ApiException if fails to make API call
   */
  public GetPatrimoinePossessions200Response crupdatePatrimoinePossessions(String nomPatrimoine, Integer page, Integer pageSize, GetPatrimoinePossessions200Response getPatrimoinePossessions200Response) throws ApiException {
    ApiResponse<GetPatrimoinePossessions200Response> localVarResponse = crupdatePatrimoinePossessionsWithHttpInfo(nomPatrimoine, page, pageSize, getPatrimoinePossessions200Response);
    return localVarResponse.getData();
  }

  /**
   * met à jour une possession d&#39;un patrimoine si le nom existe, sinon on le crée
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @param getPatrimoinePossessions200Response liste de possessions à ajouter ou à modifier (optional)
   * @return ApiResponse&lt;GetPatrimoinePossessions200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetPatrimoinePossessions200Response> crupdatePatrimoinePossessionsWithHttpInfo(String nomPatrimoine, Integer page, Integer pageSize, GetPatrimoinePossessions200Response getPatrimoinePossessions200Response) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = crupdatePatrimoinePossessionsRequestBuilder(nomPatrimoine, page, pageSize, getPatrimoinePossessions200Response);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("crupdatePatrimoinePossessions", localVarResponse);
        }
        return new ApiResponse<GetPatrimoinePossessions200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetPatrimoinePossessions200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder crupdatePatrimoinePossessionsRequestBuilder(String nomPatrimoine, Integer page, Integer pageSize, GetPatrimoinePossessions200Response getPatrimoinePossessions200Response) throws ApiException {
    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(400, "Missing the required parameter 'nomPatrimoine' when calling crupdatePatrimoinePossessions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/patrimoines/{nom_patrimoine}/possessions"
        .replace("{nom_patrimoine}", ApiClient.urlEncode(nomPatrimoine.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getPatrimoinePossessions200Response);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * effacer un patrimoine d&#39;une possession
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @throws ApiException if fails to make API call
   */
  public void deletePatrimoinePossessionByNom(String nomPatrimoine, String nomPossession) throws ApiException {
    deletePatrimoinePossessionByNomWithHttpInfo(nomPatrimoine, nomPossession);
  }

  /**
   * effacer un patrimoine d&#39;une possession
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deletePatrimoinePossessionByNomWithHttpInfo(String nomPatrimoine, String nomPossession) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deletePatrimoinePossessionByNomRequestBuilder(nomPatrimoine, nomPossession);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deletePatrimoinePossessionByNom", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deletePatrimoinePossessionByNomRequestBuilder(String nomPatrimoine, String nomPossession) throws ApiException {
    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(400, "Missing the required parameter 'nomPatrimoine' when calling deletePatrimoinePossessionByNom");
    }
    // verify the required parameter 'nomPossession' is set
    if (nomPossession == null) {
      throw new ApiException(400, "Missing the required parameter 'nomPossession' when calling deletePatrimoinePossessionByNom");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/patrimoines/{nom_patrimoine}/possessions/{nom_possession}"
        .replace("{nom_patrimoine}", ApiClient.urlEncode(nomPatrimoine.toString()))
        .replace("{nom_possession}", ApiClient.urlEncode(nomPossession.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * obtenir la possession demandée
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @return PossessionAvecType
   * @throws ApiException if fails to make API call
   */
  public PossessionAvecType getPatrimoinePossessionByNom(String nomPatrimoine, String nomPossession) throws ApiException {
    ApiResponse<PossessionAvecType> localVarResponse = getPatrimoinePossessionByNomWithHttpInfo(nomPatrimoine, nomPossession);
    return localVarResponse.getData();
  }

  /**
   * obtenir la possession demandée
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @return ApiResponse&lt;PossessionAvecType&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PossessionAvecType> getPatrimoinePossessionByNomWithHttpInfo(String nomPatrimoine, String nomPossession) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPatrimoinePossessionByNomRequestBuilder(nomPatrimoine, nomPossession);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPatrimoinePossessionByNom", localVarResponse);
        }
        return new ApiResponse<PossessionAvecType>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PossessionAvecType>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPatrimoinePossessionByNomRequestBuilder(String nomPatrimoine, String nomPossession) throws ApiException {
    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(400, "Missing the required parameter 'nomPatrimoine' when calling getPatrimoinePossessionByNom");
    }
    // verify the required parameter 'nomPossession' is set
    if (nomPossession == null) {
      throw new ApiException(400, "Missing the required parameter 'nomPossession' when calling getPatrimoinePossessionByNom");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/patrimoines/{nom_patrimoine}/possessions/{nom_possession}"
        .replace("{nom_patrimoine}", ApiClient.urlEncode(nomPatrimoine.toString()))
        .replace("{nom_possession}", ApiClient.urlEncode(nomPossession.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * obtenir une liste paginée des possessions d&#39;un patrimoine
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return GetPatrimoinePossessions200Response
   * @throws ApiException if fails to make API call
   */
  public GetPatrimoinePossessions200Response getPatrimoinePossessions(String nomPatrimoine, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<GetPatrimoinePossessions200Response> localVarResponse = getPatrimoinePossessionsWithHttpInfo(nomPatrimoine, page, pageSize);
    return localVarResponse.getData();
  }

  /**
   * obtenir une liste paginée des possessions d&#39;un patrimoine
   * 
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il y en a (required)
   * @param page  (optional)
   * @param pageSize  (optional)
   * @return ApiResponse&lt;GetPatrimoinePossessions200Response&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetPatrimoinePossessions200Response> getPatrimoinePossessionsWithHttpInfo(String nomPatrimoine, Integer page, Integer pageSize) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getPatrimoinePossessionsRequestBuilder(nomPatrimoine, page, pageSize);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getPatrimoinePossessions", localVarResponse);
        }
        return new ApiResponse<GetPatrimoinePossessions200Response>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetPatrimoinePossessions200Response>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getPatrimoinePossessionsRequestBuilder(String nomPatrimoine, Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(400, "Missing the required parameter 'nomPatrimoine' when calling getPatrimoinePossessions");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/patrimoines/{nom_patrimoine}/possessions"
        .replace("{nom_patrimoine}", ApiClient.urlEncode(nomPatrimoine.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "page";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
