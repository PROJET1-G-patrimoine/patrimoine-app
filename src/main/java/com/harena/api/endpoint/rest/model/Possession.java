/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.harena.api.endpoint.rest.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.harena.api.endpoint.rest.model.Devise;
import java.util.Arrays;
import java.util.Date;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.harena.api.endpoint.rest.client.ApiClient;
/**
 * Possession
 */
@JsonPropertyOrder({
  Possession.JSON_PROPERTY_T,
  Possession.JSON_PROPERTY_NOM,
  Possession.JSON_PROPERTY_VALEUR_COMPTABLE,
  Possession.JSON_PROPERTY_DEVISE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T12:58:40.550938700+01:00[GMT+01:00]", comments = "Generator version: 7.7.0")
public class Possession implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_T = "t";
  private java.time.LocalDate t;

  public static final String JSON_PROPERTY_NOM = "nom";
  private String nom;

  public static final String JSON_PROPERTY_VALEUR_COMPTABLE = "valeur_comptable";
  private Integer valeurComptable;

  public static final String JSON_PROPERTY_DEVISE = "devise";
  private Devise devise;

  public Possession() { 
  }

  public Possession t(java.time.LocalDate t) {
    this.t = t;
    return this;
  }

  /**
   * Get t
   * @return t
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public java.time.LocalDate getT() {
    return t;
  }


  @JsonProperty(JSON_PROPERTY_T)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setT(java.time.LocalDate t) {
    this.t = t;
  }


  public Possession nom(String nom) {
    this.nom = nom;
    return this;
  }

  /**
   * Get nom
   * @return nom
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNom() {
    return nom;
  }


  @JsonProperty(JSON_PROPERTY_NOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNom(String nom) {
    this.nom = nom;
  }


  public Possession valeurComptable(Integer valeurComptable) {
    this.valeurComptable = valeurComptable;
    return this;
  }

  /**
   * Get valeurComptable
   * @return valeurComptable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALEUR_COMPTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getValeurComptable() {
    return valeurComptable;
  }


  @JsonProperty(JSON_PROPERTY_VALEUR_COMPTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValeurComptable(Integer valeurComptable) {
    this.valeurComptable = valeurComptable;
  }


  public Possession devise(Devise devise) {
    this.devise = devise;
    return this;
  }

  /**
   * Get devise
   * @return devise
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Devise getDevise() {
    return devise;
  }


  @JsonProperty(JSON_PROPERTY_DEVISE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDevise(Devise devise) {
    this.devise = devise;
  }


  /**
   * Return true if this Possession object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Possession possession = (Possession) o;
    return Objects.equals(this.t, possession.t) &&
        Objects.equals(this.nom, possession.nom) &&
        Objects.equals(this.valeurComptable, possession.valeurComptable) &&
        Objects.equals(this.devise, possession.devise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(t, nom, valeurComptable, devise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Possession {\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("    nom: ").append(toIndentedString(nom)).append("\n");
    sb.append("    valeurComptable: ").append(toIndentedString(valeurComptable)).append("\n");
    sb.append("    devise: ").append(toIndentedString(devise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `t` to the URL query string
    if (getT() != null) {
      joiner.add(String.format("%st%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getT()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nom` to the URL query string
    if (getNom() != null) {
      joiner.add(String.format("%snom%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNom()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `valeur_comptable` to the URL query string
    if (getValeurComptable() != null) {
      joiner.add(String.format("%svaleur_comptable%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getValeurComptable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `devise` to the URL query string
    if (getDevise() != null) {
      joiner.add(getDevise().toUrlQueryString(prefix + "devise" + suffix));
    }

    return joiner.toString();
  }
}

